# Copyright 2013 Artur Grabowski. All rights reserved.
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file.
package parser

type ClassicParser Peg {
	Query
}

# A query is "<result filters> <counters+filters+sorting> <attributes> *:* <keywords>

Query <- ResFiltQuery !.

# For now this is just a placeholder, this will expand to different
# result filters later.
ResFiltQuery <- OffLimQuery

# A normal query may start with offset+limit.
OffLimQuery <- Offset LimQuery { p.Pa() } / LimQuery
LimQuery <- Limit Q3 { p.Pa() } / Q3
Q3 <- Params?

Offset <- < number > s	{ p.Off(buffer[begin:end]) }
Limit <- 'lim:' < number > s { p.Lim(buffer[begin:end]) }

Params <- CountAllAttrs / Attrs

CountAllAttrs <- CountAll Attrs { p.Pa() } / Attrs

CountAll <- 'count_all(' < counter_name > ')' s { p.Countall(buffer[begin:end]) }

Attrs <- { p.Inter() } (Attr s)+ Attr s? /
	{ p.Inter(); fmt.Printf("one attribute\n") } Attr s? /
	s? { fmt.Printf("no attributes\n") }

Attr <-  AttrUnion / Attribute

Attribute <- < attr_name ':' attr_value > { p.Attr(buffer[begin:end]) }
AttrUnion <- { p.Union() } AttributeORList { p.Pa() }
AttributeORList <- Attribute (s 'OR' s Attribute)+

number <- [0-9]+
s <- ' '+
counter_name <- generic_name
attr_name <- generic_name
attr_value <- generic_name
generic_name <- [a-z0-9_]+
