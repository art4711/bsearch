package parser

type QueryParser Peg {
	Query
}

# A query is "<result filters> <counters+filters+sorting> <attributes> *:* <keywords>

Query <- ResFiltQuery !.

# For now this is just a placeholder, this will expand to different
# result filters later.
ResFiltQuery <- OffLimQuery

# A normal query may start with offset+limit.
OffLimQuery <- Offset LimQuery { p.PopAdd() } / LimQuery
LimQuery <- Limit Q3 { p.PopAdd() } / Q3
Q3 <- Params?

Offset <- < number > s	{ p.Offset(buffer[begin:end]) }
Limit <- 'lim:' < number > s { p.Limit(buffer[begin:end]) }

Params <- { p.StartIntersection() } (Param s)+ Param s? /
	{ p.StartIntersection(); fmt.Printf("one attribute\n") } Param s? /
	s? { fmt.Printf("no attributes\n") }

Param <-  AttrUnion / Attribute

Attribute <- < attr_name ':' attr_value > { p.Attr(buffer[begin:end]) }
AttrUnion <- { p.StartUnion() } AttributeORList { p.PopAdd() }
AttributeORList <- Attribute s 'OR' s Attribute

number <- [0-9]+
s <- ' '+
attr_name <- [a-z0-9]+
attr_value <- [a-z0-9]+
