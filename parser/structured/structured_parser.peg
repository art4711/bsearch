# Copyright 2013 Artur Grabowski. All rights reserved.
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file.
package structured

import "bsearch/parser/opers"

type Parser Peg {
	opers.Query
}

# (offset [ 17 ] (limit [ 10 ] (count_all "hejsan" (intersection (attr "a:a") (union (attr "b:a") (attr "b:b"))))))

Query <- Operation !.

# This is the general case, but we're currently doing special cases for all different opers:
Operation <- '(' OpType (s Name)? (s Value)* (s Operation)* ')' { p.OpEnd() }

OpType 	<- <opname> { p.OpStart(buffer[begin:end]) }
Name 	<- '"' <generic_name> '"' { p.OpName(buffer[begin:end]) }
Value	<- IntValue / StrValue #/ Operation /* Not supported for now. */

IntValue <- '[' s <number> s ']' { p.OpIntValue(buffer[begin:end]) }
StrValue <- '[' s <generic_name> s ']' { p.OpStrValue(buffer[begin:end]) }

number <- [0-9]+
s <- ' '+
generic_name <- [a-zA-Z0-9_:]+
opname <- [a-z_]+
